# plot alpha beta timecourses for poster traces
library(tidyverse)
library(ggdist)
library(distributional)
blue = 'dodgerblue1'
orange = 'darkorange1'
yellow = '#ffd103'
# load
bornstein = read.csv('bornsteinEffect.csv')
hanks = read.csv('hanksEffect.csv')
rm(bornstein, hanks)
# load
bornstein_df = read.csv('bornsteinEffect.csv')
hanks_df = read.csv('hanksEffect.csv')
View(hanks_df)
View(bornstein_df)
ggplot(hanks_df, aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
geom_vline(trialDelay) +
stat_slab() +
theme_classic()
ggplot(hanks_df, aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab() +
theme_classic()
ggplot(hanks_df, aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue) +
stat_slab(aes(ydist=(vizAlpha, vizBeta)), color=orange) +
ggplot(hanks_df, aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue) +
stat_slab(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange) +
theme_classic() +
labs(y = 'beta_memory', title = 'hanks effect')
ggplot(hanks_df, aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue) +
stat_slab(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
ggsave('maximal_hanks_effect.png', width=6, height=4, dpi='retina')
? seq
nDists = 8
hanks_df %>%
select(timestep == seq(1, max(timestep), length.out=nDists))
View(hanks_df)
hanks_df$timestep
hanks_df %>% select(memAlpha==1)
hanks_df %>%
dplyr::select(timestep == seq(1, max(timestep), length.out=nDists))
# plot alpha beta timecourses for poster traces
library(tidyverse)
hanks_df %>%
dplyr::select(timestep == seq(1, max(timestep), length.out=nDists))
rlang::last_trace()
hanks_df %>%
dplyr::select(hanks_df, timestep == seq(1, max(timestep), length.out=nDists))
hanks_df %>%
dplyr::select(hanks_df, timestep == 1)
hanks_df %>%
tidyselect::select(hanks_df, timestep == 1)
View(hanks_df)
hanks_df %>%
select(timestep==1)
hanks_df %>%
select(hanks_df$timestep==1)
hanks_df %>%
dplyr::select(timestep==1)
hanks_df %>%
dplyr::select(timestep==1)
# plot alpha beta timecourses for poster traces
library(tidyverse)
library(ggdist)
library(distributional)
hanks_df %>%
dplyr::select(timestep==1)
hanks_df$timestep==1
? select
hanks_df %>%
dplyr::select(timestep=1)
hanks_df %>%
select(timestep=1)
hanks_df %>%
select(timestep=c(seq(1, max(timestep), length.out=nDists)))
hanks_df %>%
select(where(timestep==seq(1,max(timestep), length.out=nDists))
timestep=c(seq(1, max(timestep), length.out=nDists)))
subrows = seq(1, max(hanks_df$timestep), length.out=nDists)
subrows = round(seq(1, max(hanks_df$timestep), length.out=nDists))
hanks_df[subrows,] %>%
ggplot(hanks_df, aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue) +
stat_slab(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,]
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue) +
stat_slab(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue, fill=blue) +
stat_slab(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
?stat_slab
nDists = 25
subrows = round(seq(1, max(hanks_df$timestep), length.out=nDists))
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slab(color=blue, fill=blue) +
stat_slab(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_halfeye(color=blue, fill=blue) +
stat_halfeye(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, side='none') +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
hanks_df[subrows,] %>%
ggplot(aes(x=subrows, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
subrows
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'beta_s', title = 'hanks effect', x = 'every single timestep')
ggsave('hanks_effect_betaPDFs.png', width=6, height=4, dpi='retina')
subrows = round(seq(1, max(bornstein_df$timestep), length.out=nDists))
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'beta_s', title = 'bornstein effect', x = 'every single timestep')
?scale_x_continuous
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t)', title = 'late effect', x = 'timestep (~ms)')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
#scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t)', title = 'late effect', x = 'timestep (~ms)')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
#scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t)', title = 'late effect', x = 'timestep (~ms)')
# plot alpha beta timecourses for poster traces
library(tidyverse)
library(ggdist)
library(distributional)
# load
bornstein_df = read.csv('bornsteinEffect.csv')
hanks_df = read.csv('hanksEffect.csv')
subrows = round(seq(1, max(hanks_df$timestep), length.out=nDists))
subrows
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
#scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t)', title = 'late effect', x = 'timestep (~ms)')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t)', title = 'late effect', x = 'timestep (~ms)')
fill = c('memory', 'vision')
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)',
fill = c('memory', 'vision'))
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)',
color = 'Legend')
ggsave('hanks_effect_betaPDFs.png', width=6, height=4, dpi='retina')
# plot
nDists = 20
subrows = round(seq(1, max(hanks_df$timestep), length.out=nDists))
hanks_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
ggsave('hanks_effect_betaPDFs.png', width=6, height=4, dpi='retina')
subrows = round(seq(1, max(bornstein_df$timestep), length.out=nDists))
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'beta_s', title = 'bornstein effect', x = 'every single timestep')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
geom_vline(xintercept = 379) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
geom_vline(xintercept = 379) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
geom_vline(xintercept = 379, linestyle = 'dashed') +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
geom_vline(xintercept = 379, linetype = 'dashed') +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
geom_vline(xintercept = 379, linetype = 'dashed', size=1) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
bornstein_df[subrows,] %>%
ggplot(aes(x=timestep, ydist=dist_beta(memAlpha, memBeta))) +
scale_x_continuous(breaks = subrows) +
stat_slabinterval(color=blue, fill=blue, show_interval = FALSE) +
stat_slabinterval(aes(ydist=dist_beta(vizAlpha, vizBeta)), color=orange, fill=orange, show_interval = FALSE) +
theme_classic() +
labs(y = 'g_s(t): belief about value of generating parameter', title = 'late effect', x = 'timestep (~ms)')
ggsave('bornstein_effect_betaPDFs.png', width=6, height=4, dpi='retina')
